#!/bin/bash
rm -f /tmp/tempfifo1
rm -f /tmp/a.out
mkfifo /tmp/tempfifo1 2>/dev/null
cat << 'EOF' > /tmp/tempfifo1 &


  .section  __TEXT,__text,regular,pure_instructions
  .macosx_version_min 10, 10
  .globl  _main
  .align  4, 0x90
_main:                                  ## @main
  .cfi_startproc
## BB#0:
  pushq %rbp
Ltmp0:
  .cfi_def_cfa_offset 16
Ltmp1:
  .cfi_offset %rbp, -16
  movq  %rsp, %rbp
Ltmp2:
  .cfi_def_cfa_register %rbp
  subq  $32, %rsp
  leaq  L_.str(%rip), %rax
  movl  $0, -4(%rbp)
  movl  %edi, -8(%rbp)
  movq  %rsi, -16(%rbp)
  movq  %rax, %rdi
  movb  $0, %al
  callq _printf
  xorl  %ecx, %ecx
  movl  %eax, -20(%rbp)         ## 4-byte Spill
  movl  %ecx, %eax
  addq  $32, %rsp
  popq  %rbp
  retq
  .cfi_endproc

  .section  __TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
  .asciz  "Hi there!\n"


.subsections_via_symbols



EOF

cat /tmp/tempfifo1 | gcc -x assembler -o /tmp/a.out -
/tmp/a.out



#   .section  __TEXT,__text,regular,pure_instructions
#   .globl  _ASMSwitchRB
#   .align  4, 0x90
# _main:
#   ##DEBUG_VALUE: CSwitchRB:imageArray <- RDI
#   ##DEBUG_VALUE: CSwitchRB:numBytes <- ESI
#   pushq %rbp
#   movq  %rsp, %rbp

#   xorl  %eax, %eax
#   ##DEBUG_VALUE: CSwitchRB:i <- 0

# loop:
#   movb  (%rdi,%rax), %cl
#   movb  2(%rdi,%rax), %dl
#   movb  %dl, (%rdi,%rax)
#   movb  %cl, 2(%rdi,%rax)

#   addq  $4, %rax
#   cmpl  %esi, %eax
#   jl  loop
# exit:
#   popq  %rbp
#   retq


#   .section  __TEXT,__text,regular,pure_instructions
#   .macosx_version_min 10, 10
#   .globl  _main
#   .align  4, 0x90
# _main:                                  ## @main
#   .cfi_startproc
# ## BB#0:
#   pushq %rbp
# Ltmp0:
#   .cfi_def_cfa_offset 16
# Ltmp1:
#   .cfi_offset %rbp, -16
#   movq  %rsp, %rbp
# Ltmp2:
#   .cfi_def_cfa_register %rbp
#   subq  $32, %rsp
#   leaq  L_.str(%rip), %rax
#   movl  $0, -4(%rbp)
#   movl  %edi, -8(%rbp)
#   movq  %rsi, -16(%rbp)
#   movq  %rax, %rdi
#   movb  $0, %al
#   callq _printf
#   xorl  %ecx, %ecx
#   movl  %eax, -20(%rbp)         ## 4-byte Spill
#   movl  %ecx, %eax
#   addq  $32, %rsp
#   popq  %rbp
#   retq
#   .cfi_endproc

#   .section  __TEXT,__cstring,cstring_literals
# L_.str:                                 ## @.str
#   .asciz  "Hi there!\n"


# .subsections_via_symbols


